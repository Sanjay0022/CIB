# -*- coding: utf-8 -*-
"""CIP-TASK-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KqseXJT-ScsssayKkT8KH2VfZncpIh57
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score, mean_squared_error, mean_absolute_error
from math import sqrt

import pandas as pd
d = pd.read_csv("Iris.csv")
data  = d.drop_duplicates()
data

from scipy.stats import poisson
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True
S = ['Iris-setosa','Iris-versicolor','Iris-virginica']
fig, (ax1, ax2) = plt.subplots(1, 2)
for i in range(0, 3):
  data['Species'].value_counts().plot(ax=ax1, kind='bar', xlabel='Species', ylabel='frequency', color=['green'],width=1, label =S[i])
ax1.legend()
data['Species'].value_counts().plot(ax=ax2,kind='pie',fontsize=10,autopct='%.2f')
ax2.yaxis.set_visible(False)
plt.title("Species")

fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.scatter(data['SepalLengthCm'], data['SepalWidthCm'], c ="blue")
ax1.set_xlabel('SepalLengthCm')
ax1.set_ylabel('SepalWidthCm')
#Question 4 Part B
data['Species'].value_counts().plot(ax=ax2, kind='bar', xlabel='Species', ylabel='frequency', color=['red','black','orange'])
ax2.grid(color = 'blue', linestyle = '--', linewidth = 1)

from scipy.stats import binom
import matplotlib.pyplot as plt
x = range(1, 100)
y0 = binom.pmf(x,100,0.5)
y1 = binom.pmf(x,50,0.5)
y2 = binom.pmf(x,100,0.6)
plt.plot(x, y0, label = "b=0.5,N=100")
plt.plot(x, y1, label = "b=0.5,N=50")
plt.plot(x, y2, label = "b=0.6,N=100")
plt.legend()
plt.ylabel("p(k, n, p)", fontsize="18")
plt.xlabel("k", fontsize="18")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

svm_classifier = SVC(kernel='rbf', random_state=42)
svm_classifier.fit(X_train_scaled, y_train)

y_pred = svm_classifier.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

f1 = f1_score(y_test, y_pred, average='weighted')


rmse = sqrt(mean_squared_error(y_test, y_pred))

mse = mean_squared_error(y_test, y_pred)

# Print the accuracies
print("F1 Score:", f1)
print("RMSE:", rmse)
print("MSE:", mse)