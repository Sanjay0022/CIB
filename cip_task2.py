# -*- coding: utf-8 -*-
"""CIP-TASK2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WQFFCxWQ3TfOZsec3iFCoJHOaNtLJ-3m
"""

from google.colab import drive
drive.mount('/content/gdrive/', force_remount=True)

import pandas as pd
import numpy as np
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.arima_model import ARMA
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

data = pd.read_csv('births.csv')

print(data.head())

def check_stationarity(timeseries):

    result_adf = adfuller(timeseries)
    print('ADF Statistic:', result_adf[0])
    print('p-value:', result_adf[1])
    print('Critical Values:')
    for key, value in result_adf[4].items():
        print('\t%s: %.3f' % (key, value))


    result_kpss = kpss(timeseries)
    print('\nKPSS Statistic:', result_kpss[0])
    print('p-value:', result_kpss[1])
    print('Critical Values:')
    for key, value in result_kpss[3].items():
        print('\t%s: %.3f' % (key, value))

check_stationarity(data['births'])

d = 1
differenced_data = data['births'].diff(periods=d).dropna()

plt.figure(figsize=(12, 4))
plt.plot(differenced_data)
plt.title(f'Differenced Data (d={d})')
plt.show()

check_stationarity(differenced_data)

plot_acf(data['births'])
plot_pacf(data['births'])

plot_acf(differenced_data)
plot_pacf(differenced_data)

!pip install pmdarima

from pmdarima import auto_arima

model = auto_arima(differenced_data, seasonal=False, stepwise=True, suppress_warnings=True)
p, d, q = model.get_params()['order']
print(f'Selected p, d, and q values: p={p}, d={d}, q={q}')

train_size = int(len(data) * 0.6)
train, test = data['births'][:train_size], data['births'][train_size:]

arima_model = ARIMA(data['births'], order=(6, 1, 1))
arima_result = arima_model.fit()

arima_result.summary()

arima_model1 = ARIMA(data['births'], order=(0, 1, 1))
arima_result1 = arima_model1.fit()

arima_result1.summary()

arma_model = ARIMA(differenced_data, order=(0, 0, 1))
arma_result = arma_model.fit()

arma_result.summary()

predictions_arima = arima_result1.predict(start=len(train), end=len(train) + len(test) - 1, typ='levels')
mse = mean_squared_error(test, predictions_arima)
rmse = np.sqrt(mse)

# Print the results
print("Mean Squared Error: ", mse)
print("Root Mean Squared Error: ", rmse)

import matplotlib.pyplot as plt

# Plot the original and predicted values
plt.figure(figsize=(12, 6))
plt.plot(test.index, test, label='Original Values')
plt.plot(test.index, predictions_arima, label='Predicted Values', color='red')
plt.title('Original vs. Predicted Values')
plt.xlabel('Time')
plt.ylabel('Births')
plt.legend()
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(test.index, test, label='Original Values')
plt.plot(test.index, predictions_arma, label='Predicted Values', color='red')
plt.title('Original vs. Predicted Values')
plt.xlabel('Time')
plt.ylabel('Births')
plt.legend()
plt.show()